@inherits UmbracoViewPage<dynamic>
@using Umbraco.Web.Templates
@using Newtonsoft.Json.Linq
@*
    Razor helpers located at the bottom of this file
*@
@{
    try
    {
        var numberOfColumns = 24;
        if (Model != null && Model.sections[0] != null)
        {
            numberOfColumns = Model.sections[0].grid;
        }

        if (Model != null && Model.sections != null)
        {
            var oneColumn = ((System.Collections.ICollection)Model.sections).Count == 1;
            <div class="umb-grid">
                @if (oneColumn)
                {
                    foreach (var section in Model.sections)
                    {
                        <div class="grid-section">
                            @foreach (var row in section.rows)
                            {
                                @renderRow(row, true, numberOfColumns);
                            }
                        </div>
                    }
                }
                else
                {
                    <div class="container">
                        <div class="row clearfix">
                            @foreach (var s in Model.sections)
                            {
                                <div class="grid-section">
                                    <div class="col-sm-@s.grid column">
                                        @foreach (var row in s.rows)
                                        {
                                            @renderRow(row, false, numberOfColumns);
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        }
    }
    catch (Exception) { }

}

@helper renderRow(dynamic row, bool singleColumn, int numberOfColumns)
{
    <div @RenderElementAttributes(row)>
        @Umbraco.If(singleColumn, "<div class='container'>")
        <div class="row clearfix">
            @foreach (var area in row.areas)
            {
                var colValue = area.grid;
                if (numberOfColumns == 12)
                {
                    colValue = colValue * 2;
                }
                <div class="col-sm-@colValue column">
                    <div @RenderElementAttributes(area)>
                        @foreach (var control in area.controls)
                        {
                            if (control != null && control.editor != null && control.editor.view != null)
                            {
                                <text>@Html.Partial("grid/editors/base", (object)control)</text>
                            }
                        }
                    </div>
                </div>
            }
        </div>
        @Umbraco.If(singleColumn, "</div>")
    </div>
}
@functions {
    public static MvcHtmlString RenderElementAttributes(dynamic contentItem)
    {
        var attrs = new List<string>();
        JObject cfg = contentItem.config;

        if (cfg != null)
            foreach (JProperty property in cfg.Properties())
            {
                attrs.Add(property.Name + "=\"" + property.Value.ToString() + "\"");
            }

        JObject style = contentItem.styles;

        if (style != null)
        {
            var cssVals = new List<string>();
            foreach (JProperty property in style.Properties())
                cssVals.Add(property.Name + ":" + property.Value.ToString() + ";");

            if (cssVals.Any())
                attrs.Add("style=\"" + string.Join(" ", cssVals) + "\"");
        }

        return new MvcHtmlString(string.Join(" ", attrs));
    }
}